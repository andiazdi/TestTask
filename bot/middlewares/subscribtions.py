from aiogram import BaseMiddleware
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message
from aiogram.enums.chat_member_status import ChatMemberStatus
from config import REQUIRED_CHATS, REQUIRED_CHANNELS
from .markups import MiddlewareMarkup


class SubscriptionMiddleware(BaseMiddleware):
    def __init__(self):
        self.required_chats = {
            **REQUIRED_CHATS,
            **REQUIRED_CHANNELS,
        }

    async def __call__(self, handler, event: Message, data: dict):
        for chat_title, chat_id in self.required_chats.items():
            if chat_id.startswith("@"):
                chat_info = f"<a href=t.me/{chat_id[1:]}>{chat_title}</a>"
            else:
                chat_info = f"–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª {chat_title}"
            try:
                member = await event.bot.get_chat_member(chat_id, event.from_user.id)
                if member.status in (
                    ChatMemberStatus.KICKED,
                    ChatMemberStatus.LEFT,
                ):
                    await event.answer(
                        f"üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã:",
                        reply_markup=MiddlewareMarkup.get_markup(self.required_chats),
                    )
                    return
            except TelegramBadRequest:
                await event.answer(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {chat_info}",
                )
                return

        return await handler(event, data)
